/*
    dev_t     st_dev;         ID of device containing file
    ino_t     st_ino;         Inode number
    mode_t    st_mode;        File type and mode
    nlink_t   st_nlink;       Number of hard links
    uid_t     st_uid;         User ID of owner
    gid_t     st_gid;         Group ID of owner
    dev_t     st_rdev;        Device ID (if special file)
    off_t     st_size;        Total size, in bytes
    blksize_t st_blksize;     Block size for filesystem I/O
    blkcnt_t  st_blocks;      Number of 512B blocks allocated


    char *file_type;
    char *file_permissions;
    int hard_link;
    char *file_owner;
    char *user_group;
    int file_size;
    char *month;
    int day;
    int hours;
    int minutes;
    char *file_name;

    https://youtu.be/VoLMhaee2cs?si=8X05NULK-pRWiLwn
*/


/*
    – – Fichier régulier
    b – Bloc de fichier spécial
    c – fichier spécial de caractère
    d – Répertoire
    l – Lien symbolique
    n – fichier réseau
    p – FIFO
    s – socket
*/

/*
    printf((stats.st_mode & S_IRUSR) ? "r" : "-");
    printf((stats.st_mode & S_IWUSR) ? "w" : "-");
    printf((stats.st_mode & S_IXUSR) ? "x" : "-");
    printf((stats.st_mode & S_IRGRP) ? "r" : "-");
    printf((stats.st_mode & S_IWGRP) ? "w" : "-");
    printf((stats.st_mode & S_IXGRP) ? "x" : "-");
    printf((stats.st_mode & S_IROTH) ? "r" : "-");
    printf((stats.st_mode & S_IWOTH) ? "w" : "-");
    printf((stats.st_mode & S_IXOTH) ? "x" : "-");
*/

/*
To calculate the total block size shown as Total 848, you need to sum the block sizes of each file and directory listed. The block size for each item is typically 512 bytes (though this can vary depending on the system). Here's the process step-by-step:

Steps to Calculate:
Block Size Per File:

The block size for each file is typically 512 bytes, but file sizes are divided into 512-byte blocks.
If a file is larger than 512 bytes but not a multiple of 512, it will still consume an extra block. For example:
A file of size 1000 bytes would take 2 blocks (because 1000 bytes is more than 512 bytes but less than 1024 bytes).
Identify the File Sizes: The file sizes are shown in the 5th column:

4096, 4096, 4096, 2622, 48, 1490, 4096, 559941, 246344, 933, 210, 4096, 4096, 417, 4096.
Convert Each File Size to Blocks: To convert the file size to blocks, divide by 512 and round up to the next whole number. For example:

A file of size 4096 bytes takes 
4096
512
=
8
512
4096
​
 =8 blocks.
A file of size 2622 bytes takes 
2622
512
≈
5.12
512
2622
​
 ≈5.12 → 6 blocks.
A file of size 559941 bytes takes 
559941
512
≈
1093.64
512
559941
​
 ≈1093.64 → 1094 blocks.
Sum the Blocks: Convert each file size into blocks and sum them. Here's the block calculation for each file size:

File Size (bytes)	Blocks Needed
4096	8
4096	8
4096	8
2622	6
48	1
1490	3
4096	8
559941	1094
246344	482
933	2
210	1
4096	8
4096	8
417	1
4096	8
Total the Blocks: Now, sum all the blocks:

8
+
8
+
8
+
6
+
1
+
3
+
8
+
1094
+
482
+
2
+
1
+
8
+
8
+
1
+
8
=
1656
 blocks
8+8+8+6+1+3+8+1094+482+2+1+8+8+1+8=1656 blocks
However, the system shows Total 848. This could be because the file system is using a different block size for the summary, or some files are compressed or sparse. On some systems, the total count is calculated in 1 KB blocks (1024 bytes) rather than 512 bytes.

If you want an exact match for the 848, it's likely using 1 KB (1024 bytes) blocks:

1656
 blocks
×
512
 bytes/block
1024
 bytes/KB
=
828
 KB (approx)
1024 bytes/KB
1656 blocks×512 bytes/block
​
 =828 KB (approx)
The system might then round this to 848 KB, which is displayed as the total.

Conclusion:
The total 848 refers to the total number of 1 KB blocks used by the listed files, not the raw byte count. On most systems, ls reports in 1 KB blocks, so you need to divide the file sizes by 1024 to match this.
*/